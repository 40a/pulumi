// *** WARNING: this file was generated by the Coconut IDL Compiler (CIDLC).  ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as coconut from "@coconut/coconut";

export class Queue extends coconut.Resource implements QueueArgs {
    public readonly name: string;
    public readonly fifoQueue?: boolean;
    public readonly queueName?: string;
    public contentBasedDeduplication?: boolean;
    public delaySeconds?: number;
    public maximumMessageSize?: number;
    public messageRetentionPeriod?: number;
    public receiveMessageWaitTimeSeconds?: number;
    public redrivePolicy?: RedrivePolicy;
    public visibilityTimeout?: number;

    constructor(args: QueueArgs) {
        super();
        if (args.name === undefined) {
            throw new Error("Missing required argument 'name'");
        }
        this.name = args.name;
        this.fifoQueue = args.fifoQueue;
        this.queueName = args.queueName;
        this.contentBasedDeduplication = args.contentBasedDeduplication;
        this.delaySeconds = args.delaySeconds;
        this.maximumMessageSize = args.maximumMessageSize;
        this.messageRetentionPeriod = args.messageRetentionPeriod;
        this.receiveMessageWaitTimeSeconds = args.receiveMessageWaitTimeSeconds;
        this.redrivePolicy = args.redrivePolicy;
        this.visibilityTimeout = args.visibilityTimeout;
    }
}

export interface QueueArgs {
    readonly name: string;
    readonly fifoQueue?: boolean;
    readonly queueName?: string;
    contentBasedDeduplication?: boolean;
    delaySeconds?: number;
    maximumMessageSize?: number;
    messageRetentionPeriod?: number;
    receiveMessageWaitTimeSeconds?: number;
    redrivePolicy?: RedrivePolicy;
    visibilityTimeout?: number;
}

export interface RedrivePolicy {
    deadLetterTarget: Queue;
    maxReceiveCount: number;
}


