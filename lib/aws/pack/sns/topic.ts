// *** WARNING: this file was generated by the Lumi IDL Compiler (CLIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";

export let ApplicationTopic: TopicProtocol = "application";
export let EmailJSONTopic: TopicProtocol = "email-json";
export let EmailTopic: TopicProtocol = "email";
export let HTTPSTopic: TopicProtocol = "https";
export let HTTPTopic: TopicProtocol = "http";
export let LambdaTopic: TopicProtocol = "lambda";
export let SMSTopic: TopicProtocol = "sms";
export let SQSTopic: TopicProtocol = "sqs";

export class Topic extends lumi.Resource implements TopicArgs {
    public readonly name: string;
    public readonly topicName?: string;
    public displayName?: string;
    public subscription?: TopicSubscription[];

    constructor(name: string, args: TopicArgs) {
        super();
        if (name === undefined) {
            throw new Error("Missing required resource name");
        }
        this.name = name;
        this.topicName = args.topicName;
        this.displayName = args.displayName;
        this.subscription = args.subscription;
    }
}

export interface TopicArgs {
    readonly topicName?: string;
    displayName?: string;
    subscription?: TopicSubscription[];
}

export type TopicProtocol =
    "application" |
    "email-json" |
    "email" |
    "https" |
    "http" |
    "lambda" |
    "sms" |
    "sqs";

export interface TopicSubscription {
    protocol: TopicProtocol;
    endpoint: string;
}


