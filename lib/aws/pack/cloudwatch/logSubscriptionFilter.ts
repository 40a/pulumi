// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

/* tslint:disable:ordered-imports variable-name */
import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {ARN} from "../types";

export let ByLogStreamDistribution: LogSubscriptionDistribution = "ByLogStream";
export let RandomDistribution: LogSubscriptionDistribution = "Random";

export type LogSubscriptionDistribution =
    "ByLogStream" |
    "Random";

export class LogSubscriptionFilter extends lumi.NamedResource implements LogSubscriptionFilterArgs {
    public readonly logGroupName: string;
    public filterPattern: string;
    public readonly destinationArn: string;
    public roleArn?: ARN;
    public distribution?: LogSubscriptionDistribution;
    public creationTime: number;

    public static get(id: lumi.ID): LogSubscriptionFilter {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): LogSubscriptionFilter[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: LogSubscriptionFilterArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.logGroupName, "") === undefined) {
            throw new Error("Missing required argument 'logGroupName'");
        }
        this.logGroupName = args.logGroupName;
        if (lumirt.defaultIfComputed(args.filterPattern, "") === undefined) {
            throw new Error("Missing required argument 'filterPattern'");
        }
        this.filterPattern = args.filterPattern;
        if (lumirt.defaultIfComputed(args.destinationArn, "") === undefined) {
            throw new Error("Missing required argument 'destinationArn'");
        }
        this.destinationArn = args.destinationArn;
        this.roleArn = args.roleArn;
        this.distribution = args.distribution;
    }
}

export interface LogSubscriptionFilterArgs {
    readonly logGroupName: string;
    filterPattern: string;
    readonly destinationArn: string;
    roleArn?: ARN;
    distribution?: LogSubscriptionDistribution;
}

