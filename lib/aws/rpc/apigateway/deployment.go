// *** WARNING: this file was generated by the Coconut IDL Compiler (CIDLC).  ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
    "errors"

    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/coconut/pkg/resource"
    "github.com/pulumi/coconut/pkg/tokens"
    "github.com/pulumi/coconut/pkg/util/contract"
    "github.com/pulumi/coconut/pkg/util/mapper"
    "github.com/pulumi/coconut/sdk/go/pkg/cocorpc"
)

/* RPC stubs for Deployment resource provider */

// DeploymentToken is the type token corresponding to the Deployment package type.
const DeploymentToken = tokens.Type("aws:apigateway/deployment:Deployment")

// DeploymentProviderOps is a pluggable interface for Deployment-related management functionality.
type DeploymentProviderOps interface {
    Check(ctx context.Context, obj *Deployment) ([]mapper.FieldError, error)
    Create(ctx context.Context, obj *Deployment) (string, error)
    Get(ctx context.Context, id string) (*Deployment, error)
    InspectChange(ctx context.Context,
        id string, old *Deployment, new *Deployment, diff *resource.ObjectDiff) ([]string, error)
    Update(ctx context.Context,
        id string, old *Deployment, new *Deployment, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id string) error
}

// DeploymentProvider is a dynamic gRPC-based plugin for managing Deployment resources.
type DeploymentProvider struct {
    ops DeploymentProviderOps
}

// NewDeploymentProvider allocates a resource provider that delegates to a ops instance.
func NewDeploymentProvider(ops DeploymentProviderOps) cocorpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &DeploymentProvider{ops: ops}
}

func (p *DeploymentProvider) Check(
    ctx context.Context, req *cocorpc.CheckRequest) (*cocorpc.CheckResponse, error) {
    contract.Assert(req.GetType() == string(DeploymentToken))
    obj, _, decerr := p.Unmarshal(req.GetProperties())
    if decerr == nil || len(decerr.Failures()) == 0 {
        failures, err := p.ops.Check(ctx, obj)
        if err != nil {
            return nil, err
        }
        if len(failures) > 0 {
            decerr = mapper.NewDecodeErr(failures)
        }
    }
    return resource.NewCheckResponse(decerr), nil
}

func (p *DeploymentProvider) Name(
    ctx context.Context, req *cocorpc.NameRequest) (*cocorpc.NameResponse, error) {
    contract.Assert(req.GetType() == string(DeploymentToken))
    obj, _, decerr := p.Unmarshal(req.GetProperties())
    if decerr != nil {
        return nil, decerr
    }
    if obj.Name == "" {
        return nil, errors.New("Name property cannot be empty")
    }
    return &cocorpc.NameResponse{Name: obj.Name}, nil
}

func (p *DeploymentProvider) Create(
    ctx context.Context, req *cocorpc.CreateRequest) (*cocorpc.CreateResponse, error) {
    contract.Assert(req.GetType() == string(DeploymentToken))
    obj, _, decerr := p.Unmarshal(req.GetProperties())
    if decerr != nil {
        return nil, decerr
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &cocorpc.CreateResponse{
        Id:   id,
    }, nil
}

func (p *DeploymentProvider) Get(
    ctx context.Context, req *cocorpc.GetRequest) (*cocorpc.GetResponse, error) {
    contract.Assert(req.GetType() == string(DeploymentToken))
    id := req.GetId()
    obj, err := p.ops.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return &cocorpc.GetResponse{
        Properties: resource.MarshalProperties(
            nil, resource.NewPropertyMap(obj), resource.MarshalOptions{}),
    }, nil
}

func (p *DeploymentProvider) InspectChange(
    ctx context.Context, req *cocorpc.ChangeRequest) (*cocorpc.InspectChangeResponse, error) {
    contract.Assert(req.GetType() == string(DeploymentToken))
    old, oldprops, decerr := p.Unmarshal(req.GetOlds())
    if decerr != nil {
        return nil, decerr
    }
    new, newprops, decerr := p.Unmarshal(req.GetNews())
    if decerr != nil {
        return nil, decerr
    }
    diff := oldprops.Diff(newprops)
    var replaces []string
    if diff.Changed("name") {
        replaces = append(replaces, "name")
    }
    more, err := p.ops.InspectChange(ctx, req.GetId(), old, new, diff)
    if err != nil {
        return nil, err
    }
    return &cocorpc.InspectChangeResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *DeploymentProvider) Update(
    ctx context.Context, req *cocorpc.ChangeRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(DeploymentToken))
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, req.GetId(), old, new, diff); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *DeploymentProvider) Delete(
    ctx context.Context, req *cocorpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(DeploymentToken))
    if err := p.ops.Delete(ctx, req.GetId()); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *DeploymentProvider) Unmarshal(
    v *pbstruct.Struct) (*Deployment, resource.PropertyMap, mapper.DecodeError) {
    var obj Deployment
    props := resource.UnmarshalProperties(v)
    result := mapper.MapIU(props.Mappable(), &obj)
    return &obj, props, result
}

/* Marshalable Deployment structure(s) */

// Deployment is a marshalable representation of its corresponding IDL type.
type Deployment struct {
    Name string `json:"name"`
    RestAPI *resource.ID `json:"restAPI"`
    Description *string `json:"description,omitempty"`
    StageDescription *StageDescription `json:"stageDescription,omitempty"`
    StageName *string `json:"stageName,omitempty"`
}

// Deployment's properties have constants to make dealing with diffs and property bags easier.
const (
    Deployment_Name = "name"
    Deployment_RestAPI = "restAPI"
    Deployment_Description = "description"
    Deployment_StageDescription = "stageDescription"
    Deployment_StageName = "stageName"
)

/* Marshalable StageDescription structure(s) */

// StageDescription is a marshalable representation of its corresponding IDL type.
type StageDescription struct {
    CacheClusterEnabled *bool `json:"cacheClusterEnabled,omitempty"`
    CacheClusterSize *string `json:"cacheClusterSize,omitempty"`
    CacheDataEncrypted *bool `json:"cacheDataEncrypted,omitempty"`
    CacheTTLInSeconds *float64 `json:"cacheTTLInSeconds,omitempty"`
    CachingEnabled *bool `json:"cachingEnabled,omitempty"`
    ClientCertificate *resource.ID `json:"clientCertificate,omitempty"`
    DataTraceEnabled *bool `json:"dataTraceEnabled,omitempty"`
    Description *string `json:"description,omitempty"`
    LoggingLevel *LoggingLevel `json:"loggingLevel,omitempty"`
    MethodSettings *[]MethodSetting `json:"methodSettings,omitempty"`
    MetricsEnabled *bool `json:"metricsEnabled,omitempty"`
    StageName *string `json:"stageName,omitempty"`
    ThrottlingBurstLimit *float64 `json:"throttlingBurstLimit,omitempty"`
    ThrottlingRateLimit *float64 `json:"throttlingRateLimit,omitempty"`
    Variables *map[string]string `json:"variables,omitempty"`
}

// StageDescription's properties have constants to make dealing with diffs and property bags easier.
const (
    StageDescription_CacheClusterEnabled = "cacheClusterEnabled"
    StageDescription_CacheClusterSize = "cacheClusterSize"
    StageDescription_CacheDataEncrypted = "cacheDataEncrypted"
    StageDescription_CacheTTLInSeconds = "cacheTTLInSeconds"
    StageDescription_CachingEnabled = "cachingEnabled"
    StageDescription_ClientCertificate = "clientCertificate"
    StageDescription_DataTraceEnabled = "dataTraceEnabled"
    StageDescription_Description = "description"
    StageDescription_LoggingLevel = "loggingLevel"
    StageDescription_MethodSettings = "methodSettings"
    StageDescription_MetricsEnabled = "metricsEnabled"
    StageDescription_StageName = "stageName"
    StageDescription_ThrottlingBurstLimit = "throttlingBurstLimit"
    StageDescription_ThrottlingRateLimit = "throttlingRateLimit"
    StageDescription_Variables = "variables"
)


