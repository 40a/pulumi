// Code generated by protoc-gen-go.
// source: analyzer.proto
// DO NOT EDIT!

/*
Package cocorpc is a generated protocol buffer package.

It is generated from these files:
	analyzer.proto
	engine.proto
	provider.proto

It has these top-level messages:
	AnalyzeRequest
	AnalyzeResponse
	AnalyzeFailure
	AnalyzeResourceRequest
	AnalyzeResourceResponse
	AnalyzeResourceFailure
	LogRequest
	CheckRequest
	CheckResponse
	CheckFailure
	NameRequest
	NameResponse
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	UpdateRequest
	UpdateImpactResponse
	DeleteRequest
*/
package cocorpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AnalyzeRequest struct {
	Pkg string `protobuf:"bytes,1,opt,name=pkg" json:"pkg,omitempty"`
}

func (m *AnalyzeRequest) Reset()                    { *m = AnalyzeRequest{} }
func (m *AnalyzeRequest) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeRequest) ProtoMessage()               {}
func (*AnalyzeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AnalyzeRequest) GetPkg() string {
	if m != nil {
		return m.Pkg
	}
	return ""
}

type AnalyzeResponse struct {
	Failures []*AnalyzeFailure `protobuf:"bytes,1,rep,name=failures" json:"failures,omitempty"`
}

func (m *AnalyzeResponse) Reset()                    { *m = AnalyzeResponse{} }
func (m *AnalyzeResponse) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeResponse) ProtoMessage()               {}
func (*AnalyzeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AnalyzeResponse) GetFailures() []*AnalyzeFailure {
	if m != nil {
		return m.Failures
	}
	return nil
}

type AnalyzeFailure struct {
	Reason string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (m *AnalyzeFailure) Reset()                    { *m = AnalyzeFailure{} }
func (m *AnalyzeFailure) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeFailure) ProtoMessage()               {}
func (*AnalyzeFailure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AnalyzeFailure) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type AnalyzeResourceRequest struct {
	Type       string                  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Properties *google_protobuf.Struct `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
}

func (m *AnalyzeResourceRequest) Reset()                    { *m = AnalyzeResourceRequest{} }
func (m *AnalyzeResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeResourceRequest) ProtoMessage()               {}
func (*AnalyzeResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AnalyzeResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AnalyzeResourceRequest) GetProperties() *google_protobuf.Struct {
	if m != nil {
		return m.Properties
	}
	return nil
}

type AnalyzeResourceResponse struct {
	Failures []*AnalyzeResourceFailure `protobuf:"bytes,1,rep,name=failures" json:"failures,omitempty"`
}

func (m *AnalyzeResourceResponse) Reset()                    { *m = AnalyzeResourceResponse{} }
func (m *AnalyzeResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeResourceResponse) ProtoMessage()               {}
func (*AnalyzeResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AnalyzeResourceResponse) GetFailures() []*AnalyzeResourceFailure {
	if m != nil {
		return m.Failures
	}
	return nil
}

type AnalyzeResourceFailure struct {
	Property string `protobuf:"bytes,1,opt,name=property" json:"property,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *AnalyzeResourceFailure) Reset()                    { *m = AnalyzeResourceFailure{} }
func (m *AnalyzeResourceFailure) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeResourceFailure) ProtoMessage()               {}
func (*AnalyzeResourceFailure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AnalyzeResourceFailure) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *AnalyzeResourceFailure) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*AnalyzeRequest)(nil), "cocorpc.AnalyzeRequest")
	proto.RegisterType((*AnalyzeResponse)(nil), "cocorpc.AnalyzeResponse")
	proto.RegisterType((*AnalyzeFailure)(nil), "cocorpc.AnalyzeFailure")
	proto.RegisterType((*AnalyzeResourceRequest)(nil), "cocorpc.AnalyzeResourceRequest")
	proto.RegisterType((*AnalyzeResourceResponse)(nil), "cocorpc.AnalyzeResourceResponse")
	proto.RegisterType((*AnalyzeResourceFailure)(nil), "cocorpc.AnalyzeResourceFailure")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ResourceAnalyzer service

type ResourceAnalyzerClient interface {
	// Analyze analyzes an entire project/stack/snapshot, and returns any errors that it finds.
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
	// AnalyzeResource analyzes a single resource object, and returns any errors that it finds.
	AnalyzeResource(ctx context.Context, in *AnalyzeResourceRequest, opts ...grpc.CallOption) (*AnalyzeResourceResponse, error)
}

type resourceAnalyzerClient struct {
	cc *grpc.ClientConn
}

func NewResourceAnalyzerClient(cc *grpc.ClientConn) ResourceAnalyzerClient {
	return &resourceAnalyzerClient{cc}
}

func (c *resourceAnalyzerClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := grpc.Invoke(ctx, "/cocorpc.ResourceAnalyzer/Analyze", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAnalyzerClient) AnalyzeResource(ctx context.Context, in *AnalyzeResourceRequest, opts ...grpc.CallOption) (*AnalyzeResourceResponse, error) {
	out := new(AnalyzeResourceResponse)
	err := grpc.Invoke(ctx, "/cocorpc.ResourceAnalyzer/AnalyzeResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceAnalyzer service

type ResourceAnalyzerServer interface {
	// Analyze analyzes an entire project/stack/snapshot, and returns any errors that it finds.
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
	// AnalyzeResource analyzes a single resource object, and returns any errors that it finds.
	AnalyzeResource(context.Context, *AnalyzeResourceRequest) (*AnalyzeResourceResponse, error)
}

func RegisterResourceAnalyzerServer(s *grpc.Server, srv ResourceAnalyzerServer) {
	s.RegisterService(&_ResourceAnalyzer_serviceDesc, srv)
}

func _ResourceAnalyzer_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAnalyzerServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cocorpc.ResourceAnalyzer/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAnalyzerServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAnalyzer_AnalyzeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAnalyzerServer).AnalyzeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cocorpc.ResourceAnalyzer/AnalyzeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAnalyzerServer).AnalyzeResource(ctx, req.(*AnalyzeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceAnalyzer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cocorpc.ResourceAnalyzer",
	HandlerType: (*ResourceAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _ResourceAnalyzer_Analyze_Handler,
		},
		{
			MethodName: "AnalyzeResource",
			Handler:    _ResourceAnalyzer_AnalyzeResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analyzer.proto",
}

func init() { proto.RegisterFile("analyzer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x31, 0x6b, 0xc3, 0x30,
	0x10, 0x85, 0xeb, 0xa4, 0x24, 0xe9, 0x15, 0xd2, 0xa0, 0x21, 0x36, 0xa6, 0x50, 0xa3, 0xc9, 0x93,
	0x03, 0xc9, 0xd0, 0xa1, 0x50, 0xe8, 0x92, 0xa9, 0x93, 0x0b, 0xd9, 0x1d, 0x73, 0x31, 0xa1, 0xc6,
	0x52, 0x25, 0x79, 0x70, 0x7f, 0x52, 0x7f, 0x65, 0xa9, 0x7c, 0x72, 0x4d, 0xd5, 0x6c, 0x27, 0xeb,
	0xe9, 0xbd, 0xf7, 0x9d, 0x61, 0x59, 0x34, 0x45, 0xdd, 0x7d, 0xa2, 0xca, 0xa4, 0x12, 0x46, 0xb0,
	0x79, 0x29, 0x4a, 0xa1, 0x64, 0x19, 0xdf, 0x57, 0x42, 0x54, 0x35, 0x6e, 0xec, 0xe7, 0x63, 0x7b,
	0xda, 0x68, 0xa3, 0xda, 0xd2, 0xf4, 0x32, 0xce, 0x61, 0xf9, 0xd2, 0x3f, 0xcc, 0xf1, 0xa3, 0x45,
	0x6d, 0xd8, 0x0a, 0xa6, 0xf2, 0xbd, 0x8a, 0x82, 0x24, 0x48, 0x6f, 0xf2, 0x9f, 0x91, 0xef, 0xe1,
	0x6e, 0xd0, 0x68, 0x29, 0x1a, 0x8d, 0x6c, 0x07, 0x8b, 0x53, 0x71, 0xae, 0x5b, 0x85, 0x3a, 0x0a,
	0x92, 0x69, 0x7a, 0xbb, 0x0d, 0x33, 0x0a, 0xcc, 0x48, 0xbb, 0xef, 0xef, 0xf3, 0x41, 0xc8, 0xd3,
	0x21, 0x8b, 0xee, 0xd8, 0x1a, 0x66, 0x0a, 0x0b, 0x2d, 0x1a, 0x8a, 0xa3, 0x13, 0x47, 0x58, 0xff,
	0x26, 0x8a, 0x56, 0x95, 0x43, 0x3b, 0x06, 0xd7, 0xa6, 0x93, 0x48, 0x7a, 0x3b, 0xb3, 0x47, 0x00,
	0xa9, 0x84, 0x44, 0x65, 0xce, 0xa8, 0xa3, 0x49, 0x12, 0xd8, 0x3a, 0x3d, 0x76, 0xe6, 0xb0, 0xb3,
	0x37, 0x8b, 0x9d, 0x8f, 0xa4, 0xfc, 0x00, 0xa1, 0x17, 0x43, 0x80, 0x4f, 0x1e, 0xe0, 0xc3, 0x5f,
	0x40, 0xf7, 0xc6, 0x07, 0x7d, 0xf5, 0xea, 0x3b, 0xe0, 0x18, 0x16, 0x94, 0xdf, 0x11, 0xc2, 0x70,
	0x1e, 0x2d, 0x63, 0x32, 0x5e, 0xc6, 0xf6, 0x2b, 0x80, 0x95, 0xf3, 0x21, 0x5b, 0xc5, 0x9e, 0x61,
	0x4e, 0x33, 0x0b, 0xfd, 0x62, 0x76, 0x57, 0x71, 0xf4, 0x4f, 0x63, 0x4b, 0xc7, 0xaf, 0xd8, 0x61,
	0xfc, 0x4f, 0xad, 0x35, 0xbb, 0x08, 0xe8, 0xfc, 0x92, 0xcb, 0x02, 0xe7, 0x7b, 0x9c, 0xd9, 0x7d,
	0xef, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x48, 0x96, 0x9a, 0x8f, 0x02, 0x00, 0x00,
}
